#!/usr/bin/python

import pdb
import sys
import traceback
from xml.dom import expatbuilder
import click
import dbus
import dbus.glib
import gobject

# Simple app using Tomboy dbus api
# see: https://arstechnica.com/information-technology/2007/09/using-the-tomboy-d-bus-interface/


class Note(object):

    def __init__(self, uri, interface=None):
        self.uri = uri
        self.interface = interface or get_interface()

    def __str__(self):
        return 'Note(%r)' % self.uri

    @property
    def tags(self):
        return self.interface.GetTagsForNote(self.uri) or []

    @property
    def title(self):
        return self.interface.GetNoteTitle(self.uri)

    @property
    def contents(self):
        return self.interface.GetNoteContents(self.uri)

    @contents.setter
    def contents(self, value):
        return self.interface.SetNoteContents(self.uri, value)

    @property
    def contents_xml(self):
        return self.interface.GetNoteContentsXml(self.uri)

    @contents_xml.setter
    def contents_xml(self, value):
        return self.interface.SetNoteContentsXml(self.uri, value)

    @property
    def xml(self):
        return self.interface.GetNoteCompleteXml(self.uri)

    @xml.setter
    def xml(self, value):
        return self.interface.SetNoteCompleteXml(self.uri, value)

    def add_tag(self, tag):
        return self.interface.AddTagToNote(self.uri, str(tag))

    def remove_tag(self, tag):
        return self.interface.RemoveTagFromNote(self.uri, str(tag))

    @property
    def notebook(self):
        return self.interface.GetNotebookForNote(self.uri)

    @notebook.setter
    def notebook(self, value):
        # This call appears to set the notebook. That is, if the note already
        # has a notebook, this *replaces* it.
        return self.interface.AddNoteToNotebook(self.uri, value)

    def display(self, search=None):
        if search:
            return self.interface.DisplayNoteWithSearch(self.uri, search)
        else:
            return self.interface.DisplayNote(self.uri)

    def hide(self):
        return self.interface.HideNote(self.uri)

    @property
    def create_date(self):
        return self.interface.GetNoteCreateDate(self.uri)

    @property
    def change_date(self):
        return self.interface.GetNoteChangeDate(self.uri)

    def delete(self):
        return self.interface.DeleteNote(self.uri)

    def exists(self):
        return self.interace.NoteExists(self.uri)


class NoteParamType(click.ParamType):
    name = 'note'

    def convert(self, value, param, ctx):
        # TODO: avoid tomboy global
        t = Tomboy()
        note = t.find(value)
        if not note:
            self.fail('No such note: %s' % value, param, ctx)
        return note


NOTE = NoteParamType()


class Tomboy(object):

    def __init__(self, interface=None):
        self.interface = interface or get_interface()

    def list(self, tag=None, notebook=None):
        if notebook is not None:
            notes = self.interface.GetAllNotesInNotebook(notebook)
            return [Note(n) for n in notes]
        elif tag is not None:
            return [Note(n) for n in self.interface.GetAllNotesWithTag(tag)]
        else:
            return [Note(n) for n in self.interface.ListAllNotes()]

    def get_start(self):
        """Return start note"""
        return Note(self.interface.FindStartHereNote())

    def new_note(self, title=None):
        # Should we also support CreateNamedNoteWithUri ?
        if title is None:
            return Note(self.interface.CreateNote())
        else:
            return Note(self.interface.CreateNamedNote(title))

    def find(self, title):
        uri = self.interface.FindNote(title)
        if not uri:
            return None
        else:
            return Note(uri)

    def display_search(self, text=None):
        if text is None:
            self.interface.DisplaySearch()
        else:
            self.interface.DisplaySearchWithSearch(text)

    @property
    def version(self):
        return self.interface.Version()

    def add_notebook(self, name):
        return self.interface.AddNotebook(name)

    def search(self, query, case_sensitive):
        print "case sensitive = %r" % case_sensitive
        if not case_sensitive:
            # Work around a bug in Tomboy
            query = query.lower()
        uris = self.interface.SearchNotes(query, bool(case_sensitive))
        return [Note(u) for u in uris]


@click.group()
def tb():
    # main command
    pass


@tb.command('list')
@click.option('-t', '--tag', help='list notes with tag')
@click.option('-b/', '--notebook', help='list notes in notebook')
@click.option('--show-tags/--no-show-tags', help='show tags')
@click.option('--show-notebooks/--no-show-notebooks', help='show notebooks')
@click.option('-u/', '--show-uris/--no-show-uris', help='show note uris')
def list(tag, notebook, show_tags, show_notebooks, show_uris):
    """List notes"""
    t = Tomboy()
    notes = t.list(tag, notebook)
    for note in sorted(notes, key=lambda n: n.change_date):
        if show_uris:
            print "%s %s" % (note.uri, note.title)
        else:
            print note.title
        if show_notebooks:
            notebook = note.notebook
            if notebook:
                print "    notebook: %s" % notebook
        if show_tags:
            for tag in note.tags:
                print "    tag: %s" % tag


@tb.command('search')
@click.argument('query')
@click.option('--case/--nocase', '-c/-i', default=False)
# case-insensitive *by default*
def search(query, case):
    t = Tomboy()
    notes = t.search(query, case)
    for note in sorted(notes, key=lambda n: n.change_date):
        print note.title
    # TODO - combine output code with list


@tb.command('start')
def start():
    """Display the Start Here note"""
    t = Tomboy()
    t.get_start().display()


@tb.command('show')
@click.argument('note', type=NOTE)
@click.option('--xml/--no-xml', help='show complete xml')
@click.option('--xc/', '--xml-contents/--no-xml-contents',
              help='show xml contents')
def show(note, xml, xml_contents):
    """Output the contents of the note"""
    if xml:
        print note.xml
    elif xml_contents:
        print note.contents_xml
    else:
        print note.contents


@tb.command('tag')
@click.option('-b/', '--notebook/--no-notebook', help='add notebook tag')
@click.argument('note', type=NOTE)
@click.argument('tag')
def tag(notebook, note, tag):
    """Add a tag to a note"""
    if notebook:
        tag = "system:notebook:%s" % tag
    note.add_tag(tag)


@tb.command('set-notebook')
@click.argument('note', type=NOTE)
@click.argument('notebook')
def set_notebook(note, notebook):
    """Add note to notebook"""
    note.notebook = notebook


@tb.command()
def watch():
    """Watch Tomboy activity"""
    bus = dbus.SessionBus()

    def onNoteAdded(uri):
        note = Note(uri)
        print "Note created: %s (%s)" % (note.title, uri)
    bus.add_signal_receiver(
            onNoteAdded,
            dbus_interface="org.gnome.Tomboy.RemoteControl",
            signal_name="NoteAdded")

    def onNoteSaved(uri):
        note = Note(uri)
        print "Note %s saved!" % note.title
    bus.add_signal_receiver(
            onNoteSaved,
            dbus_interface="org.gnome.Tomboy.RemoteControl",
            signal_name="NoteSaved")

    def onNoteDeleted(uri, title):
        print "Note %s deleted! (was %s)" % (title, uri)
    bus.add_signal_receiver(
            onNoteDeleted,
            dbus_interface="org.gnome.Tomboy.RemoteControl",
            signal_name="NoteDeleted")

    # Loop until manually terminated
    gobject.MainLoop().run()


def get_interface():
    # Get the D-Bus session bus
    bus = dbus.SessionBus()
    # Access the Tomboy D-Bus object
    obj = bus.get_object(
            "org.gnome.Tomboy",
            "/org/gnome/Tomboy/RemoteControl")
    # Access the Tomboy remote control interface
    tomboy = dbus.Interface(obj, "org.gnome.Tomboy.RemoteControl")
    return tomboy


@tb.command('mknote')
@click.argument('title', nargs=-1)
@click.option('--show/--no-show', '-s/')
@click.option('--xml/--no-xml', '-x/')
@click.option('-f', '--file', '--filename')
def mknote(title, show, xml, filename):
    """Create a note from stdin or file"""

    # read our content
    if filename:
        with open(filename, 'r') as fp:
            contents = fp.read()
    else:
        contents = sys.stdin.read()

    # and validate it
    if xml:
        document = expatbuilder.parseString(contents, False)
        top = document.getElementsByTagName('note-content')[0]
        # TODO - combine with similar code in dup command
        node = top.firstChild
        if node.nodeType != node.TEXT_NODE:
            # Could happen if title has formatting
            raise ValueError('Unable to find title')
        parts = node.data.split('\n\n', 1)
        if len(parts) < 2:
            raise ValueError('Unable to find title')

    if title:
        title = ' '.join(title)
    t = Tomboy()
    note = t.new_note(title=title)
    print('New note: %s' % note.title)

    if not note.uri:  # XXX
        print('Unable to create note: %s' % title)
        return 1

    note.add_tag("commandline")

    if xml:
        # replace the title in contents
        node.data = title + '\n\n' + parts[1]
        contents = top.toxml()
        note.contents_xml = contents
        if show:
            note.display()
    else:
        contents = note.title + "\n\n" + contents
        # [!] Workaround for a bug in Tomboy
        #     We must display the note before updating contents
        #     see: https://osmanov-dev-notes.blogspot.com/2010/10/importing-text-files-into-tomboy.html
        note.display()
        note.contents = contents
        if not show:
            note.hide()


@tb.command('dup')
@click.argument('note', type=NOTE)
@click.option('--new-title', '-t', help='title for the new note')
@click.option('--show/--no-show', '-s/')
def dup(note, new_title, show):
    """Duplicate a note"""
    src = note
    if not new_title:
        new_title = "Copy of %s" % src.title
    t = Tomboy()
    chk = t.find(new_title)
    if chk:
        print('Already exists: %s' % new_title)
        return 1
    contents = src.contents_xml
    if not contents:
        # should not happen
        print('No contents for note: %s' % src)
        return 1
    # change title in contents
    document = expatbuilder.parseString(contents, False)
    top = document.getElementsByTagName('note-content')[0]
    # [!] TomBoy has a questionable design here with the literal html-ish
    #     content included directly in the node. This content uses literal
    #     whitespace and expects the first line to be match the title.
    #     That is why we have the following assertions
    node = top.firstChild
    if node.nodeType != node.TEXT_NODE:
        # Could happen if title has formatting
        raise ValueError('Unable to find title')
    parts = node.data.split('\n\n', 1)
    if len(parts) < 2:
        raise ValueError('Unable to find title')
    # ok, replace the title
    node.data = new_title + '\n\n' + parts[1]
    contents = top.toxml()
    dup = t.new_note(new_title)
    dup.add_tag("duplicate")
    dup.contents_xml = contents
    if show:
        dup.display()


def main():
    global tomboy
    try:
        # TODO: avoid tomboy global
        tomboy = get_interface()
        tb()
    except Exception:
        etype, e, trace = sys.exc_info()
        traceback.print_exc()
        pdb.post_mortem(trace)


if __name__ == '__main__':
    main()
