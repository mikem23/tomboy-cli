#!/usr/bin/python

import pdb
import sys
import traceback
from xml.dom import expatbuilder
import click
import dbus
import dbus.glib
import gobject

# Simple app using Tomboy dbus api
# see: https://arstechnica.com/information-technology/2007/09/using-the-tomboy-d-bus-interface/


@click.group()
def tb():
    # main command
    pass


@tb.command('list')
@click.option('-t', '--tag', help='list notes with tag')
def list(tag):
    """List notes"""
    if tag:
        notes = tomboy.GetAllNotesWithTag(tag)
    else:
        notes = tomboy.ListAllNotes()
    titles = [tomboy.GetNoteTitle(n) for n in notes]
    for t in sorted(titles):
        print(t)


@tb.command('start')
def start():
    """Display the Start Here note"""
    tomboy.DisplayNote(tomboy.FindStartHereNote())


@tb.command('show')
@click.argument('note')
@click.option('--xml/--no-xml', help='show complete xml')
@click.option('--xc/', '--xml-contents/--no-xml-contents',
              help='show xml contents')
def show(note, xml, xml_contents):
    """Output the contents of the note"""
    note = tomboy.FindNote(note)
    if xml:
        print tomboy.GetNoteCompleteXml(note)
    elif xml_contents:
        print tomboy.GetNoteContentsXml(note)
    else:
        print tomboy.GetNoteContents(note)


@tb.command('tag')
@click.argument('note')
@click.argument('tag')
def tag(note, tag):
    """Add a tag to a note"""
    tomboy.AddTagToNote(tomboy.FindNote(note), tag)
    # NOTE - tags are not the same as notebooks and do *not* appear in he UI


@tb.command()
def watch():
    """Watch Tomboy activity"""
    bus = dbus.SessionBus()

    def onNoteAdded(n):
        print "Note created: %s" % n
    bus.add_signal_receiver(
            onNoteAdded,
            dbus_interface="org.gnome.Tomboy.RemoteControl",
            signal_name="NoteAdded")

    # Notify when a note is saved
    def onNoteSaved(n):
        print "Note %s saved!" % tomboy.GetNoteTitle(n)
    bus.add_signal_receiver(
            onNoteSaved,
            dbus_interface="org.gnome.Tomboy.RemoteControl",
            signal_name="NoteSaved")

    # Loop until manually terminated
    gobject.MainLoop().run()


def setup():
    global tomboy
    # Get the D-Bus session bus
    bus = dbus.SessionBus()
    # Access the Tomboy D-Bus object
    obj = bus.get_object(
            "org.gnome.Tomboy",
            "/org/gnome/Tomboy/RemoteControl")
    # Access the Tomboy remote control interface
    tomboy = dbus.Interface(obj, "org.gnome.Tomboy.RemoteControl")


@tb.command('mknote')
@click.argument('title', nargs=-1)
@click.option('--show/--no-show', '-s/')
@click.option('--xml/--no-xml', '-x/')
@click.option('-f', '--file', '--filename')
def mknote(title, show, xml, filename):
    """Create a note from stdin or file"""

    # read our content
    if filename:
        with open(filename, 'r') as fp:
            contents = fp.read()
    else:
        contents = sys.stdin.read()

    # and validate it
    if xml:
        document = expatbuilder.parseString(contents, False)
        top = document.getElementsByTagName('note-content')[0]
        # TODO - combine with similar code in dup command
        node = top.firstChild
        if node.nodeType != node.TEXT_NODE:
            # Could happen if title has formatting
            raise ValueError('Unable to find title')
        parts = node.data.split('\n\n', 1)
        if len(parts) < 2:
            raise ValueError('Unable to find title')

    # sort out our title
    if title:
        title = ' '.join(title)
        new_note = tomboy.CreateNamedNote(title)
    else:
        new_note = tomboy.CreateNote()
        title = tomboy.GetNoteTitle(new_note)
        print('New note: %s' % title)

    if not new_note:
        print('Unable to create note: %s' % title)
        return 1

    tomboy.AddTagToNote(new_note, "commandline")
    if xml:
        # replace the title in contents
        node.data = title + '\n\n' + parts[1]
        contents = top.toxml()
        tomboy.SetNoteContentsXml(new_note, contents)
        if show:
            tomboy.DisplayNote(new_note)
    else:
        contents = tomboy.GetNoteTitle(new_note) + "\n\n" + contents
        # [!] Workaround for a bug in Tomboy
        #     We must display the note before updating contents
        #     see: https://osmanov-dev-notes.blogspot.com/2010/10/importing-text-files-into-tomboy.html
        tomboy.DisplayNote(new_note)
        tomboy.SetNoteContents(new_note, contents)
        if not show:
            tomboy.HideNote(new_note)


@tb.command('dup')
@click.argument('note')
@click.option('--new-title', '-t', help='title for the new note')
@click.option('--show/--no-show', '-s/')
def dup(note, new_title, show):
    """Duplicate a note"""
    src = tomboy.FindNote(note)
    if not src:
        print('No such note: %s' % note)
        return 1
    if not new_title:
        new_title = "Copy of %s" % tomboy.GetNoteTitle(src)
    chk = tomboy.FindNote(new_title)
    if chk:
        print('Already exists: %s' % new_title)
        return 1
    contents = tomboy.GetNoteContentsXml(src)
    if not contents:
        # should not happen
        print('No contents for note: %s' % src)
        return 1
    # change title in contents
    document = expatbuilder.parseString(contents, False)
    top = document.getElementsByTagName('note-content')[0]
    # [!] TomBoy has a questionable design here with the literal html-ish
    #     content included directly in the node. This content uses literal
    #     whitespace and expects the first line to be match the title.
    #     That is why we have the following assertions
    node = top.firstChild
    if node.nodeType != node.TEXT_NODE:
        # Could happen if title has formatting
        raise ValueError('Unable to find title')
    parts = node.data.split('\n\n', 1)
    if len(parts) < 2:
        raise ValueError('Unable to find title')
    # ok, replace the title
    node.data = new_title + '\n\n' + parts[1]
    contents = top.toxml()
    new_note = tomboy.CreateNamedNote(new_title)
    tomboy.AddTagToNote(new_note, "duplicate")
    tomboy.SetNoteContentsXml(new_note, contents)
    if show:
        tomboy.DisplayNote(new_note)


if __name__ == '__main__':
    try:
        setup()
        tb()
    except Exception:
        etype, e, tb = sys.exc_info()
        traceback.print_exc()
        pdb.post_mortem(tb)
