#!/usr/bin/python

import pdb
import sys
import traceback
import click
import dbus
import dbus.glib
import gobject

# Simple app using Tomboy dbus api
# see: https://arstechnica.com/information-technology/2007/09/using-the-tomboy-d-bus-interface/


@click.group()
def tb():
    # main command
    pass


@tb.command('list')
@click.option('-t', '--tag', help='list notes with tag')
def list(tag):
    """List notes"""
    if tag:
        notes = tomboy.GetAllNotesWithTag(tag)
    else:
        notes = tomboy.ListAllNotes()
    titles = [tomboy.GetNoteTitle(n) for n in notes]
    for t in sorted(titles):
        print(t)


@tb.command('start')
def start():
    """Display the Start Here note"""
    tomboy.DisplayNote(tomboy.FindStartHereNote())


@tb.command('show')
@click.argument('note')
@click.option('--xml/--no-xml', help='show complete xml')
def show(note, xml):
    """Output the contents of the note"""
    note = tomboy.FindNote(note)
    if xml:
        print tomboy.GetNoteCompleteXml(note)
    else:
        print tomboy.GetNoteContents(note)


@tb.command('tag')
@click.argument('note')
@click.argument('tag')
def tag(note, tag):
    """Add a tag to a note"""
    tomboy.AddTagToNote(tomboy.FindNote(note), tag)
    # NOTE - tags are not the same as notebooks and do *not* appear in he UI


@tb.command()
def watch():
    """Watch Tomboy activity"""
    bus = dbus.SessionBus()

    def onNoteAdded(n):
        print "Note created: %s" % n
    bus.add_signal_receiver(
            onNoteAdded,
            dbus_interface="org.gnome.Tomboy.RemoteControl",
            signal_name="NoteAdded")

    # Notify when a note is saved
    def onNoteSaved(n):
        print "Note %s saved!" % tomboy.GetNoteTitle(n)
    bus.add_signal_receiver(
            onNoteSaved,
            dbus_interface="org.gnome.Tomboy.RemoteControl",
            signal_name="NoteSaved")

    # Loop until manually terminated
    gobject.MainLoop().run()


def setup():
    global tomboy
    # Get the D-Bus session bus
    bus = dbus.SessionBus()
    # Access the Tomboy D-Bus object
    obj = bus.get_object(
            "org.gnome.Tomboy",
            "/org/gnome/Tomboy/RemoteControl")
    # Access the Tomboy remote control interface
    tomboy = dbus.Interface(obj, "org.gnome.Tomboy.RemoteControl")


@tb.command('mknote')
@click.argument('title', nargs=-1)
@click.option('--show/--no-show', '-s/')
def mknote(title, show):
    """Create a note from stdin"""

    if title:
        title = ' '.join(title)
        new_note = tomboy.CreateNamedNote(title)
    else:
        new_note = tomboy.CreateNote()
        print('New note: %s' % tomboy.GetNoteTitle(new_note))

    if not new_note:
        print('Unable to create note: %s' % title)
        return

    contents = tomboy.GetNoteTitle(new_note) + "\n\n" + sys.stdin.read()
    # [!] Workaround for a bug in Tomboy
    #     We must display the note before updating contents
    #     see: https://osmanov-dev-notes.blogspot.com/2010/10/importing-text-files-into-tomboy.html
    tomboy.DisplayNote(new_note)
    tomboy.AddTagToNote(new_note, "commandline")
    rv = tomboy.SetNoteContents(new_note, contents)
    if not show:
        tomboy.HideNote(new_note)


if __name__ == '__main__':
    try:
        setup()
        tb()
    except Exception:
        etype, e, tb = sys.exc_info()
        traceback.print_exc()
        pdb.post_mortem(tb)
